#!/bin/bash

# Script de gestion de l'infrastructure Infra Control
# Usage: ./infra [command]

set -e

# Couleurs pour l'affichage
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fichiers et r√©pertoires
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# D√©tection automatique de l'environnement
if [ -f ".env.rasp" ] && [ -f "/proc/device-tree/model" ] && grep -q "Raspberry Pi" "/proc/device-tree/model" 2>/dev/null; then
    ENV_FILE=".env.rasp"
    echo -e "${BLUE}üçì Raspberry Pi d√©tect√© - Utilisation de .env.rasp${NC}"
elif [ -f ".env.prod" ]; then
    ENV_FILE=".env.prod"
    echo -e "${BLUE}üöÄ Mode production - Utilisation de .env.prod${NC}"
else
    ENV_FILE=".env"
    echo -e "${YELLOW}‚ö†Ô∏è  Mode d√©veloppement - Utilisation de .env${NC}"
fi

COMPOSE_FILE="docker-compose.prod.yml"

# V√©rifier que le fichier .env existe
check_env() {
    if [ ! -f "$ENV_FILE" ]; then
        echo -e "${RED}‚ùå Fichier $ENV_FILE non trouv√©!${NC}"
        echo "Cr√©ez-le √† partir du template appropri√©"
        exit 1
    fi
}

# Afficher l'aide
show_help() {
    echo "Usage: ./infra [command]"
    echo ""
    echo "Commands:"
    echo "  deploy        - D√©ploiement complet avec restauration de backup"
    echo "  start         - D√©marre tous les services"
    echo "  stop          - Arr√™te tous les services"
    echo "  restart       - Red√©marre tous les services"
    echo "  status        - Affiche l'√©tat des services"
    echo "  logs          - Affiche les logs (suivis en temps r√©el)"
    echo "  backup        - Cr√©e une sauvegarde de la base de donn√©es"
    echo "  restore       - Restaure une sauvegarde"
    echo "  migrate       - Ex√©cute les migrations de base de donn√©es"
    echo "  clean         - Nettoie les conteneurs et volumes (ATTENTION: supprime les donn√©es)"
    echo "  setup-local   - Installe ou configure PostgreSQL / Redis en local (hors Docker)"
    echo "  help          - Affiche cette aide"
    echo ""
    echo "Examples:"
    echo "  ./infra deploy          # D√©ploiement initial"
    echo "  ./infra start           # D√©marrage normal"
    echo "  ./infra logs            # Voir les logs"
    echo "  ./infra setup-local     # Configurer les services en local"
}

deploy() {
    check_env
    echo -e "${BLUE}üöÄ D√©ploiement complet de l'infrastructure...${NC}"
    echo ""
    
    if ! command -v docker &> /dev/null; then
        echo -e "${RED}‚ùå Docker n'est pas install√©!${NC}"
        exit 1
    fi
    
    echo -e "${YELLOW}üìÅ Cr√©ation des dossiers...${NC}"
    mkdir -p backups logs
    
    echo -e "${YELLOW}üî® Construction des images Docker...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE build
    
    echo -e "${YELLOW}üóÑÔ∏è  D√©marrage de PostgreSQL et Redis...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE up -d postgres redis
    
    echo -e "${YELLOW}‚è≥ Attente du d√©marrage des services (15s)...${NC}"
    sleep 15
    
    if ls backups/*.sql 1> /dev/null 2>&1; then
        echo -e "${YELLOW}üì• Restauration de la base de donn√©es...${NC}"
        LATEST_BACKUP=$(ls -t backups/*.sql | head -1)
        echo "   Utilisation de: $LATEST_BACKUP"
        docker exec -i infra-control-postgres psql -U postgres postgres < "$LATEST_BACKUP"
        
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}‚úÖ Base de donn√©es restaur√©e!${NC}"
        else
            echo -e "${RED}‚ùå Erreur lors de la restauration${NC}"
            echo -e "${YELLOW}   Continuons avec une base vierge...${NC}"
        fi
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Aucune backup trouv√©e - D√©marrage avec base vierge${NC}"
    fi
    
    echo -e "${YELLOW}üéØ D√©marrage du backend...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE up -d backend
    
    echo -e "${YELLOW}üìä D√©marrage des services de monitoring...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE up -d prometheus grafana node-exporter || echo -e "${YELLOW}   Monitoring optionnel non d√©marr√©${NC}"
    
    echo -e "${YELLOW}‚è≥ Attente du d√©marrage complet (30s)...${NC}"
    sleep 30
    
    echo -e "${BLUE}üîç V√©rification finale...${NC}"
    if curl -s http://localhost:8080/health/simple > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Backend op√©rationnel!${NC}"
        IP=$(hostname -I | awk '{print $1}')
        echo ""
        echo -e "${GREEN}‚ú® D√©ploiement termin√© avec succ√®s!${NC}"
        echo ""
        echo -e "${BLUE}üìå Acc√®s aux services:${NC}"
        echo "   - API Backend: http://$IP:8080"
        echo "   - Documentation Swagger: http://$IP:8080/docs"
        echo "   - Prometheus: http://$IP:9090"
        echo "   - Grafana: http://$IP:3001 (admin/admin)"
    else
        echo -e "${RED}‚ùå Le backend ne r√©pond pas!${NC}"
        echo "   V√©rifiez les logs avec: ./infra logs backend"
        exit 1
    fi
}

start() {
    check_env
    echo -e "${BLUE}üöÄ D√©marrage de l'infrastructure...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE up -d
    sleep 10
    if curl -s http://localhost:8080/health/simple > /dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Infrastructure d√©marr√©e${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Le backend met du temps √† d√©marrer...${NC}"
        echo "   V√©rifiez dans 30 secondes ou consultez les logs"
    fi
}

stop() {
    echo -e "${YELLOW}üõë Arr√™t de l'infrastructure...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE down
    echo -e "${GREEN}‚úÖ Infrastructure arr√™t√©e${NC}"
}

restart() {
    echo -e "${YELLOW}üîÑ Red√©marrage de l'infrastructure...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE restart
    echo -e "${GREEN}‚úÖ Infrastructure red√©marr√©e${NC}"
}

status() {
    echo -e "${BLUE}üìä √âtat des services:${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE ps
    echo -e "\n${BLUE}üîç Tests de sant√©:${NC}"
    if curl -s http://localhost:8080/health/simple > /dev/null 2>&1; then
        echo -e "  Backend: ${GREEN}‚úÖ OK${NC}"
    else
        echo -e "  Backend: ${RED}‚ùå KO${NC}"
    fi
    if docker exec infra-control-postgres pg_isready > /dev/null 2>&1; then
        echo -e "  PostgreSQL: ${GREEN}‚úÖ OK${NC}"
    else
        echo -e "  PostgreSQL: ${RED}‚ùå KO${NC}"
    fi
    if docker exec infra-control-redis redis-cli ping > /dev/null 2>&1; then
        echo -e "  Redis: ${GREEN}‚úÖ OK${NC}"
    else
        echo -e "  Redis: ${RED}‚ùå KO${NC}"
    fi
}

logs() {
    SERVICE=$2
    if [ -z "$SERVICE" ]; then
        echo -e "${BLUE}üìú Logs de tous les services (Ctrl+C pour quitter):${NC}"
        docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE logs -f --tail=100
    else
        echo -e "${BLUE}üìú Logs de $SERVICE (Ctrl+C pour quitter):${NC}"
        docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE logs -f --tail=100 $SERVICE
    fi
}

backup() {
    check_env
    echo -e "${BLUE}üíæ Cr√©ation d'une sauvegarde...${NC}"
    mkdir -p backups
    TIMESTAMP=$(date +%Y%m%d_%H%M%S)
    BACKUP_FILE="backups/backup_${TIMESTAMP}.sql"
    docker exec infra-control-postgres pg_dump -U postgres postgres > $BACKUP_FILE
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e: $BACKUP_FILE${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la sauvegarde${NC}"
        exit 1
    fi
}

restore() {
    check_env
    echo -e "${BLUE}üì• Restauration d'une sauvegarde...${NC}"
    if [ ! -d "backups" ] || [ -z "$(ls -A backups/*.sql 2>/dev/null)" ]; then
        echo -e "${RED}‚ùå Aucune sauvegarde trouv√©e dans backups/${NC}"
        exit 1
    fi
    echo "Sauvegardes disponibles:"
    select BACKUP_FILE in backups/*.sql; do
        if [ -n "$BACKUP_FILE" ]; then
            break
        fi
    done
    echo -e "${YELLOW}‚ö†Ô∏è  ATTENTION: Cette op√©ration va √©craser la base actuelle!${NC}"
    read -p "Continuer? (oui/non): " confirm
    if [ "$confirm" != "oui" ]; then
        echo -e "${YELLOW}‚ùå Restauration annul√©e${NC}"
        exit 0
    fi
    docker exec -i infra-control-postgres psql -U postgres postgres < $BACKUP_FILE
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Base restaur√©e depuis: $BACKUP_FILE${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la restauration${NC}"
        exit 1
    fi
}

migrate() {
    echo -e "${BLUE}üîÑ Ex√©cution des migrations...${NC}"
    docker exec infra-control-backend pnpm migration:run
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Migrations ex√©cut√©es${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors des migrations${NC}"
        exit 1
    fi
}

clean() {
    echo -e "${RED}‚ö†Ô∏è  ATTENTION: Suppression compl√®te des donn√©es!${NC}"
    read -p "√ätes-vous s√ªr? (oui/non): " confirm
    if [ "$confirm" != "oui" ]; then
        echo -e "${YELLOW}‚ùå Nettoyage annul√©${NC}"
        exit 0
    fi
    echo -e "${YELLOW}üßπ Nettoyage en cours...${NC}"
    docker-compose -f $COMPOSE_FILE --env-file $ENV_FILE down -v
    echo -e "${GREEN}‚úÖ Nettoyage termin√©${NC}"
}

setup_local() {
    echo -e "${BLUE}üõ†Ô∏è  Configuration locale (sans Docker)${NC}"

    read -p "Souhaites-tu installer PostgreSQL ? (oui/non) " install_pg
    if [[ "$install_pg" == "oui" ]]; then
        echo -e "${YELLOW}üì¶ Installation PostgreSQL...${NC}"
        sudo dnf install -y postgresql-server postgresql-contrib
        sudo postgresql-setup --initdb
        sudo systemctl enable --now postgresql
        echo -e "${GREEN}‚úÖ PostgreSQL install√©${NC}"
    fi

    read -p "Souhaites-tu configurer PostgreSQL (user/db/mdp) ? (oui/non) " config_pg
    if [[ "$config_pg" == "oui" ]]; then
        export DB_USER="upstra"
        export DB_NAME="upstradb"
        export DB_PASSWORD=$(openssl rand -base64 20)
        echo -e "${YELLOW}üîê Mot de passe g√©n√©r√© pour PostgreSQL: ${GREEN}${DB_PASSWORD}${NC}"
        sudo -u postgres psql -c "CREATE USER $DB_USER WITH PASSWORD '${DB_PASSWORD}';"
        sudo -u postgres psql -c "CREATE DATABASE $DB_NAME OWNER $DB_USER;"
        sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER;"
        sudo sed -i -E 's/(peer|ident)/md5/g' /var/lib/pgsql/data/pg_hba.conf
        sudo systemctl restart postgresql
        echo -e "${GREEN}‚úÖ PostgreSQL configur√© avec succ√®s${NC}"
        echo "‚Üí Pour te connecter : psql -U $DB_USER -d $DB_NAME -h 127.0.0.1 -W"
    fi

    read -p "Souhaites-tu installer Redis ? (oui/non) " install_redis
    if [[ "$install_redis" == "oui" ]]; then
        echo -e "${YELLOW}üì¶ Installation Redis...${NC}"
        sudo dnf install -y redis
        sudo systemctl enable --now redis
        echo -e "${GREEN}‚úÖ Redis install√©${NC}"
    fi

    read -p "Souhaites-tu configurer un mot de passe Redis ? (oui/non) " config_redis
    if [[ "$config_redis" == "oui" ]]; then
        export REDIS_PASSWORD=$(openssl rand -base64 20)
        echo -e "${YELLOW}üîê Mot de passe g√©n√©r√© pour Redis: ${GREEN}${REDIS_PASSWORD}${NC}"
        REDIS_CONF="/etc/redis/redis.conf"
        if grep -q "^# *requirepass" $REDIS_CONF; then
            sudo sed -i "s|^# *requirepass.*|requirepass $REDIS_PASSWORD|" $REDIS_CONF
        elif grep -q "^requirepass" $REDIS_CONF; then
            sudo sed -i "s|^requirepass.*|requirepass $REDIS_PASSWORD|" $REDIS_CONF
        else
            echo "requirepass $REDIS_PASSWORD" | sudo tee -a $REDIS_CONF >/dev/null
        fi
        sudo systemctl restart redis
        echo -e "${GREEN}‚úÖ Redis configur√© avec succ√®s${NC}"
        echo "‚Üí Pour te connecter : redis-cli -a $REDIS_PASSWORD"
    fi

    echo -e "${GREEN}üéâ Setup local termin√© !${NC}"
}

case "$1" in
    deploy)
        deploy
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    restart)
        restart
        ;;
    status)
        status
        ;;
    logs)
        logs $@
        ;;
    backup)
        backup
        ;;
    restore)
        restore
        ;;
    migrate)
        migrate
        ;;
    clean)
        clean
        ;;
    setup-local)
        setup_local
        ;;
    help|--help|-h|"")
        show_help
        ;;
    *)
        echo -e "${RED}‚ùå Commande inconnue: $1${NC}"
        show_help
        exit 1
        ;;
esac
