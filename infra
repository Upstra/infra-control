#!/bin/bash

set -e

# Couleurs
RED='\033[0;31m'; GREEN='\033[0;32m'; YELLOW='\033[1;33m'; BLUE='\033[0;34m'; NC='\033[0m'

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Environnements
echo
if [ -f ".env.rasp" ] && [ -f "/proc/device-tree/model" ] && grep -q "Raspberry Pi" "/proc/device-tree/model" 2>/dev/null; then
    ENV_FILE=".env.rasp"
    echo -e "${BLUE}üçì Raspberry Pi d√©tect√© - Utilisation de .env.rasp${NC}"
elif [ -f ".env.prod" ]; then
    ENV_FILE=".env.prod"
    echo -e "${BLUE}üöÄ Mode production - Utilisation de .env.prod${NC}"
else
    ENV_FILE=".env"
    echo -e "${YELLOW}‚ö†Ô∏è  Mode d√©veloppement - Utilisation de .env${NC}"
fi

COMPOSE_APP="docker-compose.prod.yml"
COMPOSE_MON="docker-compose.monitoring.yml"

check_env() {
    if [ ! -f "$ENV_FILE" ]; then
        echo -e "${RED}‚ùå Fichier $ENV_FILE non trouv√©!${NC}"
        echo "‚Üí Lance './infra setup-env'"
        exit 1
    fi
}

show_help() {
    cat <<EOF
Usage: ./infra [command]

Commands:
  setup-env     - Initialise .env, flags USE_LOCAL_DB et USE_MONITORING, demande les mots de passe
  deploy        - D√©ploie l'app (local ou Docker selon flag) + monitoring (si activ√©)
  start         - D√©marre l'app et monitoring (si activ√©)
  stop          - Arr√™te l'app et monitoring (si activ√©)
  restart       - Red√©marre tout
  status        - √âtat des services
  logs          - Logs des containers/app
  backup        - Sauvegarde DB (Docker uniquement)
  restore       - Restauration DB (Docker uniquement)
  migrate       - Migrations DB (local ou Docker selon flag)
  clean         - Nettoyage containers/volumes (Docker uniquement)
  help          - Affiche cette aide
EOF
}

# Initialise .env avec USE_LOCAL_DB, USE_MONITORING et mots de passe
setup_env() {
    echo -e "${BLUE}üîß Initialisation de l'environnement${NC}"
    if [ ! -f "$ENV_FILE" ]; then
        cat > "$ENV_FILE" <<EOF
DB_HOST=localhost
DB_PORT=5432
DB_NAME=upstradb
DB_USERNAME=upstra
DB_PASSWORD=
REDIS_HOST=localhost
REDIS_PORT=6379
REDIS_PASSWORD=
REDIS_USERNAME=default
REDIS_TLS=
USE_LOCAL_DB=false
USE_MONITORING=true
EOF
        echo -e "${GREEN}Fichier $ENV_FILE cr√©√© (template)${NC}"
    fi
    # Demande mot de passe PostgreSQL existant ou g√©n√©r√©
    echo -n "Entrez un mot de passe PostgreSQL existant (laissez vide pour en g√©n√©rer un automatiquement) : "
    read -s dbpass; echo
    if [ -n "$dbpass" ]; then
        sed -i "s|^DB_PASSWORD=.*|DB_PASSWORD=$dbpass|" "$ENV_FILE"
        echo -e "${GREEN}Mot de passe PostgreSQL enregistr√©${NC}"
    else
        echo -e "${YELLOW}Le mot de passe PostgreSQL sera g√©n√©r√© au d√©ploiement${NC}"
    fi
    # Demande mot de passe Redis existant ou g√©n√©r√©
    echo -n "Entrez un mot de passe Redis existant (laissez vide pour en g√©n√©rer un automatiquement) : "
    read -s redispass; echo
    if [ -n "$redispass" ]; then
        sed -i "s|^REDIS_PASSWORD=.*|REDIS_PASSWORD=$redispass|" "$ENV_FILE"
        echo -e "${GREEN}Mot de passe Redis enregistr√©${NC}"
    else
        echo -e "${YELLOW}Le mot de passe Redis sera g√©n√©r√© au d√©ploiement${NC}"
    fi
    # Choix DB local
    echo -e "${YELLOW}Voulez-vous utiliser Postgres/Redis EN LOCAL ? (oui/non)${NC}"
    read -p "> " ans
    if [[ "$ans" =~ ^[Oo]ui$ ]]; then
        sed -i 's/^USE_LOCAL_DB=.*/USE_LOCAL_DB=true/' "$ENV_FILE"
        echo -e "${GREEN}Mode LOCAL activ√©${NC}"
    else
        sed -i 's/^USE_LOCAL_DB=.*/USE_LOCAL_DB=false/' "$ENV_FILE"
        echo -e "${GREEN}Mode DOCKER activ√©${NC}"
    fi
    # Choix Monitoring
    echo -e "${YELLOW}Voulez-vous d√©marrer Monitoring (Prometheus + Grafana) ? (oui/non)${NC}"
    read -p "> " mon
    if [[ "$mon" =~ ^[Oo]ui$ ]]; then
        sed -i 's/^USE_MONITORING=.*/USE_MONITORING=true/' "$ENV_FILE"
        echo -e "${GREEN}Monitoring activ√©${NC}"
    else
        sed -i 's/^USE_MONITORING=.*/USE_MONITORING=false/' "$ENV_FILE"
        echo -e "${GREEN}Monitoring d√©sactiv√©${NC}"
    fi
}

# V√©rifie flags
use_local_db() { grep -q '^USE_LOCAL_DB=true' "$ENV_FILE"; }
use_monitoring() { grep -q '^USE_MONITORING=true' "$ENV_FILE"; }

# D√©marrage du backend local
start_backend_local() {
    echo -e "${BLUE}‚ñ∂Ô∏è D√©marrage du backend en local...${NC}"
    # V√©rifier version Node.js
    if command -v node >/dev/null 2>&1; then
        ver=$(node -v | sed 's/v//')
        major=$(echo "$ver" | cut -d. -f1)
        minor=$(echo "$ver" | cut -d. -f2)
    else
        major=0; minor=0
    fi
    # Installer Node 18 si version <18.12
    if [ "$major" -lt 18 ] || { [ "$major" -eq 18 ] && [ "$minor" -lt 12 ]; }; then
        echo -e "${YELLOW}Mise √† jour Node.js vers v18 (n√©cessaire pour pnpm)...${NC}"
        sudo dnf module reset nodejs -y
        sudo dnf module enable nodejs:18 -y
        sudo dnf install -y nodejs npm
    fi
    # Installer pnpm
    if ! command -v pnpm >/dev/null 2>&1; then
        echo -e "${YELLOW}Installation de pnpm...${NC}"
        npm install -g pnpm
    fi
    # D√©marrage
    pnpm install
    pnpm run build
    mkdir -p logs
    nohup pnpm run start:prod > logs/backend.log 2>&1 & echo \$! > backend.pid
    echo -e "${GREEN}Backend local lanc√© (PID \$(cat backend.pid))${NC}"
}
stop_backend_local() {
    if [ -f backend.pid ]; then
        kill "$(cat backend.pid)" && rm backend.pid
        echo -e "${GREEN}Backend local arr√™t√©${NC}"
    fi
}

# D√©ploiement
deploy() {
    check_env; mkdir -p backups logs
    # DB/Redis
    if use_local_db; then
        echo -e "${YELLOW}DB/Redis en local, Docker n‚Äôex√©cutera que le backend ou monitoring${NC}"
    else
        docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" build
        docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" up -d postgres redis
    fi
    # Backend
    if use_local_db; then
        start_backend_local
    else
        docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" up -d backend
    fi
    # Monitoring
    if use_monitoring; then
        docker compose -f "$COMPOSE_MON" --env-file "$ENV_FILE" up -d
        echo -e "${GREEN}Monitoring lanc√©${NC}"
    else
        echo -e "${YELLOW}Monitoring non lanc√©${NC}"
    fi
    echo -e "${GREEN}‚ú® D√©ploiement termin√©${NC}"
}

start() {
    check_env
    if use_local_db; then
        start_backend_local
    else
        docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" up -d postgres redis backend
    fi
    if use_monitoring; then
        docker compose -f "$COMPOSE_MON" --env-file "$ENV_FILE" up -d
    fi
    echo -e "${GREEN}üö¶ Services d√©marr√©s${NC}"
}

stop() {
    if use_local_db; then
        stop_backend_local
    else
        docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" down --remove-orphans
    fi
    if use_monitoring; then
        docker compose -f "$COMPOSE_MON" --env-file "$ENV_FILE" down --remove-orphans
    fi
    echo -e "${GREEN}üõë Services arr√™t√©s${NC}"
}

restart() { stop; start; }

status() {
    echo -e "${BLUE}üìä APP :${NC}"
    if use_local_db; then echo "(Local)"; else docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" ps; fi
    echo -e "${BLUE}üìä MONITORING :${NC}"
    if use_monitoring; then docker compose -f "$COMPOSE_MON" --env-file "$ENV_FILE" ps; else echo "(D√©sactiv√©)"; fi
}

logs() {
    echo -e "${BLUE}üìú Logs APP :${NC}"
    if use_local_db; then tail -f logs/backend.log; else docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" logs -f --tail=50 backend; fi
    if use_monitoring; then
        echo -e "${BLUE}üìú Logs MONITORING :${NC}"
        docker compose -f "$COMPOSE_MON" --env-file "$ENV_FILE" logs -f --tail=50
    fi
}

backup() {
    echo -e "${BLUE}üíæ Sauvegarde DB (Docker uniquement)${NC}"
    mkdir -p backups
    ts=$(date +%Y%m%d_%H%M%S)
    docker exec infra-control-postgres pg_dump -U "$DB_USERNAME" postgres > backups/backup_$ts.sql
    echo -e "${GREEN}‚úÖ backups/backup_$ts.sql${NC}"
}

restore() {
    echo -e "${BLUE}üì• Restauration DB (Docker uniquement)${NC}"
    select f in backups/*.sql; do [ -n "$f" ] && break; done
    docker exec -i infra-control-postgres psql -U "$DB_USERNAME" postgres < "$f"
    echo -e "${GREEN}‚úÖ Restauration OK${NC}"
}

migrate() {
    echo -e "${BLUE}üîÑ Migrations DB${NC}"
    if use_local_db; then
        pnpm run migrate
    else
        docker exec infra-control-backend pnpm migration:run
    fi
    echo -e "${GREEN}‚úÖ Migrations OK${NC}"
}

clean() {
    echo -e "${RED}‚ö†Ô∏è  Nettoyage Docker uniquement${NC}"
    docker compose -f "$COMPOSE_APP" --env-file "$ENV_FILE" down -v
    if use_monitoring; then
        docker compose -f "$COMPOSE_MON" --env-file "$ENV_FILE" down -v
    fi
    echo -e "${GREEN}üßπ Propre !${NC}"
}

case "$1" in
    setup-env) setup_env ;; deploy) deploy ;; start) start ;; stop) stop ;; restart) restart ;; status) status ;; logs) logs ;; backup) backup ;; restore) restore ;; migrate) migrate ;; clean) clean ;; help|--help|-h) show_help ;; *) echo -e "${RED}‚ùå Inconnu: $1${NC}"; show_help; exit 1 ;;
esac