version: '3.8'

services:
  # PostgreSQL Database (optimisé pour Rasp)
  postgres:
    image: postgres:15-alpine
    container_name: infra-control-postgres
    environment:
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USERNAME}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      # Optimisations pour Raspberry Pi
      - POSTGRES_SHARED_BUFFERS=128MB
      - POSTGRES_WORK_MEM=4MB
      - POSTGRES_MAINTENANCE_WORK_MEM=64MB
    ports:
      - "${DB_PORT:-5432}:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USERNAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - infra-control
    # Limiter les ressources
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M

  # Redis Cache (optimisé pour Rasp)
  redis:
    image: redis:7-alpine
    container_name: infra-control-redis
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped
    networks:
      - infra-control
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M

  # Backend NestJS
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: infra-control-backend
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_TLS=false
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SESSION_SECRET=${SESSION_SECRET}
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      - BACKEND_URL=${BACKEND_URL:-http://localhost:8080}
      # Optimisations Node.js pour Rasp
      - NODE_OPTIONS=--max-old-space-size=512
    restart: unless-stopped
    networks:
      - infra-control
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  # Prometheus (optionnel sur Rasp)
  prometheus:
    image: prom/prometheus:latest
    container_name: infra-control-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=7d'  # Réduire la rétention
      - '--storage.tsdb.retention.size=1GB'  # Limiter la taille
    restart: unless-stopped
    networks:
      - infra-control
    deploy:
      resources:
        limits:
          memory: 512M

  # Grafana (optionnel sur Rasp)
  grafana:
    image: grafana/grafana:latest
    container_name: infra-control-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - infra-control
    deploy:
      resources:
        limits:
          memory: 256M

networks:
  infra-control:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  prometheus-data:
  grafana-data: