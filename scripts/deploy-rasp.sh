#!/bin/bash

# Script de d√©ploiement pour Raspberry Pi
# Usage: ./scripts/deploy-rasp.sh

echo "üöÄ D√©ploiement Infra Control sur Raspberry Pi"
echo "==========================================="

# Couleurs
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
NC='\033[0m'

# V√©rifier que Docker est install√©
if ! command -v docker &> /dev/null; then
    echo -e "${RED}‚ùå Docker n'est pas install√©!${NC}"
    echo "Installez Docker avec: curl -fsSL https://get.docker.com | sh"
    exit 1
fi

# V√©rifier que docker-compose est install√©
if ! command -v docker-compose &> /dev/null; then
    echo -e "${RED}‚ùå Docker Compose n'est pas install√©!${NC}"
    echo "Installez Docker Compose"
    exit 1
fi

# Cr√©er les dossiers n√©cessaires
echo -e "${YELLOW}üìÅ Cr√©ation des dossiers...${NC}"
mkdir -p backups logs

# Charger les variables d'environnement
if [ ! -f .env.prod ]; then
    echo -e "${RED}‚ùå Fichier .env.prod non trouv√©!${NC}"
    exit 1
fi

# Export des variables pour docker-compose
export $(cat .env.prod | grep -v '^#' | xargs)

echo -e "${YELLOW}üì¶ Construction de l'image Docker...${NC}"
docker-compose -f docker-compose.prod.yml --env-file .env.prod build

echo -e "${YELLOW}üöÄ D√©marrage de PostgreSQL et Redis...${NC}"
docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d postgres redis

# Attendre que PostgreSQL soit pr√™t
echo -e "${YELLOW}‚è≥ Attente du d√©marrage de PostgreSQL...${NC}"
sleep 10

# V√©rifier si une backup existe
if ls backups/*.sql 1> /dev/null 2>&1; then
    echo -e "${YELLOW}üì• Restauration de la base de donn√©es depuis la backup...${NC}"
    
    # Trouver la derni√®re backup
    LATEST_BACKUP=$(ls -t backups/*.sql | head -1)
    echo "Utilisation de: $LATEST_BACKUP"
    
    # Restaurer la backup
    docker exec -i infra-control-postgres psql -U postgres postgres < "$LATEST_BACKUP"
    
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ Base de donn√©es restaur√©e!${NC}"
    else
        echo -e "${RED}‚ùå Erreur lors de la restauration!${NC}"
        exit 1
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Aucune backup trouv√©e, d√©marrage avec une base vierge${NC}"
fi

echo -e "${YELLOW}üöÄ D√©marrage du backend et des services de monitoring...${NC}"
docker-compose -f docker-compose.prod.yml --env-file .env.prod up -d

echo -e "${YELLOW}‚è≥ Attente du d√©marrage complet (30s)...${NC}"
sleep 30

# V√©rifier l'√©tat
echo -e "${YELLOW}üîç V√©rification de l'√©tat des services...${NC}"
docker-compose -f docker-compose.prod.yml --env-file .env.prod ps

# Test de sant√©
if curl -s http://localhost:8080/health/simple > /dev/null; then
    echo -e "${GREEN}‚úÖ Backend op√©rationnel!${NC}"
else
    echo -e "${RED}‚ùå Le backend ne r√©pond pas!${NC}"
    echo "V√©rifiez les logs: docker-compose -f docker-compose.prod.yml --env-file .env.prod logs backend"
fi

echo -e "${GREEN}‚ú® D√©ploiement termin√©!${NC}"
echo ""
echo "üìå Acc√®s aux services:"
echo "   - API Backend: http://$(hostname -I | awk '{print $1}'):8080"
echo "   - Swagger: http://$(hostname -I | awk '{print $1}'):8080/docs"
echo "   - Prometheus: http://$(hostname -I | awk '{print $1}'):9090"
echo "   - Grafana: http://$(hostname -I | awk '{print $1}'):3001"
echo ""
echo "üìå Commandes utiles:"
echo "   - Logs: docker-compose -f docker-compose.prod.yml --env-file .env.prod logs -f"
echo "   - Stop: docker-compose -f docker-compose.prod.yml --env-file .env.prod down"