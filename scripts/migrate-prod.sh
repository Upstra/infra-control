#!/bin/bash

echo "üöÄ Script de migration pour la production"
echo "========================================"
echo ""

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# V√©rifier si le fichier .env.prod existe
if [ ! -f .env.prod ]; then
    echo -e "${RED}‚ùå Fichier .env.prod non trouv√©!${NC}"
    echo "   Cr√©ez d'abord votre fichier .env.prod bas√© sur .env.prod.example"
    exit 1
fi

# Charger les variables d'environnement
export $(cat .env.prod | grep -v '^#' | xargs)

# Fonction pour v√©rifier l'√©tat du conteneur
check_container_status() {
    local container_name=$1
    if docker ps -a --format "table {{.Names}}\t{{.Status}}" | grep -q "$container_name.*Up"; then
        return 0
    else
        return 1
    fi
}

# Fonction pour ex√©cuter des commandes dans le conteneur backend
exec_in_backend() {
    docker exec infra-control-backend "$@"
}

echo -e "${YELLOW}üìã V√©rification de l'infrastructure...${NC}"

# V√©rifier que l'infrastructure est en cours d'ex√©cution
if ! check_container_status "infra-control-backend"; then
    echo -e "${RED}‚ùå Le conteneur backend n'est pas en cours d'ex√©cution!${NC}"
    echo "   D√©marrez d'abord l'infrastructure avec: ./infra start"
    exit 1
fi

if ! check_container_status "infra-control-postgres"; then
    echo -e "${RED}‚ùå Le conteneur PostgreSQL n'est pas en cours d'ex√©cution!${NC}"
    echo "   D√©marrez d'abord l'infrastructure avec: ./infra start"
    exit 1
fi

echo -e "${GREEN}‚úÖ Infrastructure en cours d'ex√©cution${NC}"
echo ""

# Menu principal
echo "Que souhaitez-vous faire ?"
echo "1) V√©rifier l'√©tat des migrations"
echo "2) Ex√©cuter les migrations en attente"
echo "3) Cr√©er une sauvegarde avant migration"
echo "4) Revenir √† la migration pr√©c√©dente (rollback)"
echo "5) Afficher l'historique des migrations"
echo ""
read -p "Votre choix (1-5): " choice

case $choice in
    1)
        echo -e "\n${YELLOW}üîç V√©rification de l'√©tat des migrations...${NC}"
        exec_in_backend pnpm typeorm migration:show -d dist/src/core/config/data-source.js
        ;;
    
    2)
        echo -e "\n${YELLOW}‚ö†Ô∏è  ATTENTION: Vous √™tes sur le point d'ex√©cuter les migrations en production!${NC}"
        read -p "√ätes-vous s√ªr de vouloir continuer? (y/n): " confirm
        
        if [ "$confirm" =~ ^[Yy]$ ]; then
            echo -e "\n${YELLOW}üîÑ Ex√©cution des migrations...${NC}"
            
            # Cr√©er une sauvegarde automatique
            echo -e "${YELLOW}üì¶ Cr√©ation d'une sauvegarde automatique...${NC}"
            backup_date=$(date +%Y%m%d_%H%M%S)
            backup_dir="backups/auto_migration_$backup_date"
            mkdir -p $backup_dir
            
            docker exec infra-control-postgres pg_dump -U $DB_USERNAME $DB_NAME > $backup_dir/database_backup.sql
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}‚úÖ Sauvegarde cr√©√©e: $backup_dir/database_backup.sql${NC}"
            else
                echo -e "${RED}‚ùå √âchec de la sauvegarde!${NC}"
                exit 1
            fi
            
            # Ex√©cuter les migrations
            echo -e "\n${YELLOW}üöÄ Ex√©cution des migrations...${NC}"
            exec_in_backend pnpm migration:run
            
            if [ $? -eq 0 ]; then
                echo -e "\n${GREEN}‚úÖ Migrations ex√©cut√©es avec succ√®s!${NC}"
                
                # Afficher l'√©tat final
                echo -e "\n${YELLOW}üìä √âtat final des migrations:${NC}"
                exec_in_backend pnpm typeorm migration:show -d dist/src/core/config/data-source.js
            else
                echo -e "\n${RED}‚ùå √âchec des migrations!${NC}"
                echo -e "${YELLOW}üí° Pour restaurer la base de donn√©es:${NC}"
                echo "   docker exec -i infra-control-postgres psql -U $DB_USERNAME $DB_NAME < $backup_dir/database_backup.sql"
                exit 1
            fi
        else
            echo -e "${YELLOW}‚ùå Migration annul√©e${NC}"
        fi
        ;;
    
    3)
        echo -e "\n${YELLOW}üì¶ Cr√©ation d'une sauvegarde manuelle...${NC}"
        backup_date=$(date +%Y%m%d_%H%M%S)
        backup_dir="backups/manual_$backup_date"
        mkdir -p $backup_dir
        
        # Sauvegarde de la base de donn√©es
        echo "Sauvegarde de PostgreSQL..."
        docker exec infra-control-postgres pg_dump -U $DB_USERNAME $DB_NAME > $backup_dir/database_backup.sql
        
        # Sauvegarde des volumes Docker
        echo "Sauvegarde des volumes Docker..."
        docker run --rm -v infra-control_postgres-data:/data -v $(pwd)/$backup_dir:/backup alpine tar czf /backup/postgres-data.tar.gz -C /data .
        docker run --rm -v infra-control_redis-data:/data -v $(pwd)/$backup_dir:/backup alpine tar czf /backup/redis-data.tar.gz -C /data .
        
        echo -e "${GREEN}‚úÖ Sauvegarde compl√®te cr√©√©e dans: $backup_dir${NC}"
        echo "   - database_backup.sql : Dump SQL de la base"
        echo "   - postgres-data.tar.gz : Volume PostgreSQL"
        echo "   - redis-data.tar.gz : Volume Redis"
        ;;
    
    4)
        echo -e "\n${YELLOW}‚ö†Ô∏è  ATTENTION: Rollback de migration!${NC}"
        echo "Cette op√©ration va annuler la derni√®re migration ex√©cut√©e."
        read -p "√ätes-vous s√ªr de vouloir continuer? (y/n): " confirm

        if [ "$confirm" =~ ^[Yy]$ ]; then
            echo -e "\n${YELLOW}üîÑ Rollback en cours...${NC}"
            exec_in_backend pnpm typeorm migration:revert -d dist/src/core/config/data-source.js
            
            if [ $? -eq 0 ]; then
                echo -e "${GREEN}‚úÖ Rollback effectu√© avec succ√®s!${NC}"
            else
                echo -e "${RED}‚ùå √âchec du rollback!${NC}"
            fi
        else
            echo -e "${YELLOW}‚ùå Rollback annul√©${NC}"
        fi
        ;;
    
    5)
        echo -e "\n${YELLOW}üìú Historique des migrations:${NC}"
        exec_in_backend pnpm typeorm migration:show -d dist/src/core/config/data-source.js
        ;;
    
    *)
        echo -e "${RED}‚ùå Choix invalide${NC}"
        exit 1
        ;;
esac

echo -e "\n${GREEN}‚ú® Op√©ration termin√©e!${NC}"