version: '3.8'

services:
  # Backend NestJS
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: infra-control-backend
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - DB_HOST=host.docker.internal  # PostgreSQL sur l'hôte
      - DB_PORT=${DB_PORT}
      - DB_NAME=${DB_NAME}
      - DB_USERNAME=${DB_USERNAME}
      - DB_PASSWORD=${DB_PASSWORD}
      - REDIS_HOST=host.docker.internal  # Redis sur l'hôte
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - REDIS_USERNAME=${REDIS_USERNAME}
      - REDIS_TLS=${REDIS_TLS}
      - JWT_SECRET=${JWT_SECRET}
      - JWT_EXPIRATION=${JWT_EXPIRATION}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
      - JWT_REFRESH_EXPIRATION=${JWT_REFRESH_EXPIRATION}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SESSION_SECRET=${SESSION_SECRET}
      - SETUP_KEY=${SETUP_KEY}
      - API_RATE_LIMIT=${API_RATE_LIMIT}
      - API_RATE_WINDOW=${API_RATE_WINDOW}
      - SWAGGER_TITLE=${SWAGGER_TITLE}
      - SWAGGER_DESCRIPTION=${SWAGGER_DESCRIPTION}
      - SWAGGER_VERSION=${SWAGGER_VERSION}
    extra_hosts:
      - "host.docker.internal:host-gateway"  # Pour accéder aux services sur l'hôte
    restart: unless-stopped
    networks:
      - infra-control
    labels:
      - "prometheus.io/scrape=true"
      - "prometheus.io/port=8080"
      - "prometheus.io/path=/metrics"
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: infra-control-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - infra-control

  # Grafana
  grafana:
    image: grafana/grafana:latest
    container_name: infra-control-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - infra-control

  # Node Exporter pour les métriques système
  node-exporter:
    image: prom/node-exporter:latest
    container_name: infra-control-node-exporter
    ports:
      - "9100:9100"
    command:
      - '--path.rootfs=/host'
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    restart: unless-stopped
    networks:
      - infra-control

networks:
  infra-control:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: